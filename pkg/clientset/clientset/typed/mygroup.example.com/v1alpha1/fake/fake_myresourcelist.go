// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/gwuud/my-first-crd/pkg/apis/mygroup.example.com/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeMyResourceLists implements MyResourceListInterface
type FakeMyResourceLists struct {
	Fake *FakeMygroupV1alpha1
	ns   string
}

var myresourcelistsResource = v1alpha1.SchemeGroupVersion.WithResource("myresourcelists")

var myresourcelistsKind = v1alpha1.SchemeGroupVersion.WithKind("MyResourceList")

// Get takes name of the myResourceList, and returns the corresponding myResourceList object, and an error if there is any.
func (c *FakeMyResourceLists) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.MyResourceList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(myresourcelistsResource, c.ns, name), &v1alpha1.MyResourceList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MyResourceList), err
}

// List takes label and field selectors, and returns the list of MyResourceLists that match those selectors.
func (c *FakeMyResourceLists) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.MyResourceListList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(myresourcelistsResource, myresourcelistsKind, c.ns, opts), &v1alpha1.MyResourceListList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MyResourceListList), err
}

// Watch returns a watch.Interface that watches the requested myResourceLists.
func (c *FakeMyResourceLists) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(myresourcelistsResource, c.ns, opts))

}

// Create takes the representation of a myResourceList and creates it.  Returns the server's representation of the myResourceList, and an error, if there is any.
func (c *FakeMyResourceLists) Create(ctx context.Context, myResourceList *v1alpha1.MyResourceList, opts v1.CreateOptions) (result *v1alpha1.MyResourceList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(myresourcelistsResource, c.ns, myResourceList), &v1alpha1.MyResourceList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MyResourceList), err
}

// Update takes the representation of a myResourceList and updates it. Returns the server's representation of the myResourceList, and an error, if there is any.
func (c *FakeMyResourceLists) Update(ctx context.Context, myResourceList *v1alpha1.MyResourceList, opts v1.UpdateOptions) (result *v1alpha1.MyResourceList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(myresourcelistsResource, c.ns, myResourceList), &v1alpha1.MyResourceList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MyResourceList), err
}

// Delete takes name of the myResourceList and deletes it. Returns an error if one occurs.
func (c *FakeMyResourceLists) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(myresourcelistsResource, c.ns, name, opts), &v1alpha1.MyResourceList{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeMyResourceLists) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(myresourcelistsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.MyResourceListList{})
	return err
}

// Patch applies the patch and returns the patched myResourceList.
func (c *FakeMyResourceLists) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.MyResourceList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(myresourcelistsResource, c.ns, name, pt, data, subresources...), &v1alpha1.MyResourceList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MyResourceList), err
}
